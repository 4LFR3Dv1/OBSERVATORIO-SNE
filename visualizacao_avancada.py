import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import pandas as pd
from matplotlib.collections import LineCollection
from matplotlib.patches import Circle, Rectangle, Polygon
import matplotlib.animation as animation
from datetime import datetime, timedelta
import colorsys

class VisualizacaoSNE:
    """
    Sistema de Visualiza√ß√£o Avan√ßada do SNE
    - Camadas magn√©ticas, resson√¢ncias temporais e gravidade
    - Linguagem visual propriet√°ria
    - Interface minimalista e art√≠stica
    """
    
    def __init__(self):
        self.fig, self.ax = plt.subplots(figsize=(16, 10))
        self.fig.patch.set_facecolor('#0a0a0a')
        self.ax.set_facecolor('#0a0a0a')
        
        # Paleta de cores SNE
        self.cores = {
            'magn√©tico': '#00ffff',  # Ciano para campos magn√©ticos
            'resson√¢ncia': '#ff00ff',  # Magenta para resson√¢ncias
            'gravidade': '#ffff00',  # Amarelo para gravidade
            'ruptura': '#ff4444',  # Vermelho para rupturas
            'fluxo': '#00ff00',  # Verde para fluxos
            'neutro': '#888888'  # Cinza para elementos neutros
        }
        
        # Camadas de visualiza√ß√£o
        self.camadas = {
            'magn√©ticas': [],
            'resson√¢ncias': [],
            'gravidade': [],
            'fluxos': []
        }
    
    def criar_zona_magnetica(self, preco_min, preco_max, forca, timestamp):
        """
        Cria uma zona magn√©tica com intensidade visual proporcional √† for√ßa
        """
        alpha = min(0.8, float(forca) / 100)  # Transpar√™ncia baseada na for√ßa
        zona = Rectangle(
            (timestamp, float(preco_min)), 
            timedelta(minutes=30), 
            float(preco_max) - float(preco_min),
            facecolor=self.cores['magn√©tico'],
            alpha=alpha,
            edgecolor=self.cores['magn√©tico'],
            linewidth=2,
            linestyle='--'
        )
        self.ax.add_patch(zona)
        self.camadas['magn√©ticas'].append(zona)
        
        # Adiciona label com for√ßa
        self.ax.text(
            timestamp, float(preco_max) + 50,
            f'‚ö° {float(forca):.1f}',
            color=self.cores['magn√©tico'],
            fontsize=10,
            ha='center'
        )
    
    def criar_ressonancia_temporal(self, preco, timestamp, eventos_similares):
        """
        Cria arcos/c√≠rculos indicando resson√¢ncias temporais
        """
        for evento in eventos_similares:
            # Linha de conex√£o temporal
            linha = plt.Line2D(
                [timestamp, evento['timestamp']],
                [preco, evento['preco']],
                color=self.cores['resson√¢ncia'],
                alpha=0.6,
                linewidth=1,
                linestyle=':'
            )
            self.ax.add_line(linha)
            
            # C√≠rculo de resson√¢ncia
            circulo = Circle(
                (timestamp, preco),
                radius=20,
                facecolor=self.cores['resson√¢ncia'],
                alpha=0.3,
                edgecolor=self.cores['resson√¢ncia'],
                linewidth=2
            )
            self.ax.add_patch(circulo)
            self.camadas['resson√¢ncias'].append(circulo)
    
    def criar_campo_gravitacional(self, df, centro_preco, raio_influencia):
        """
        Cria "curvatura" visual mostrando atra√ß√£o gravitacional
        """
        precos = df['close'].values.astype(float)
        timestamps = df.index.values
        
        # Calcula for√ßa gravitacional em cada ponto
        forcas = []
        for i, preco in enumerate(precos):
            distancia = abs(float(preco) - float(centro_preco))
            if distancia <= raio_influencia:
                forca = 1 - (distancia / raio_influencia)
                forcas.append(forca)
            else:
                forcas.append(0)
        
        # Cria linhas de campo gravitacional
        pontos = np.column_stack([timestamps, precos])
        segmentos = np.concatenate([pontos[:-1], pontos[1:]], axis=1)
        
        cores_segmentos = []
        for forca in forcas[:-1]:
            cor = colorsys.hsv_to_rgb(0.17, 1, float(forca))  # Amarelo com intensidade vari√°vel
            cores_segmentos.append(cor)
        
        lc = LineCollection(
            segmentos.reshape(-1, 2, 2),
            colors=cores_segmentos,
            linewidths=2,
            alpha=0.7
        )
        self.ax.add_collection(lc)
        self.camadas['gravidade'].append(lc)
    
    def criar_fluxo_dinamico(self, df, direcao='ascendente'):
        """
        Cria linhas de fluxo din√¢mico como campos magn√©ticos
        """
        precos = df['close'].values.astype(float)
        timestamps = df.index.values
        
        # Calcula gradiente de pre√ßos
        gradientes = np.gradient(precos)
        
        # Cria linhas de fluxo
        for i in range(0, len(precos)-1, 5):  # A cada 5 pontos
            if abs(gradientes[i]) > 0.1:  # S√≥ mostra fluxos significativos
                # Linha de fluxo
                linha = plt.Line2D(
                    [timestamps[i], timestamps[i+1]],
                    [float(precos[i]), float(precos[i+1])],
                    color=self.cores['fluxo'],
                    alpha=0.5,
                    linewidth=1,
                    linestyle='-'
                )
                self.ax.add_line(linha)
                
                # Seta indicando dire√ß√£o
                if gradientes[i] > 0:
                    self.ax.arrow(
                        timestamps[i], float(precos[i]),
                        timestamps[i+1] - timestamps[i],
                        float(precos[i+1]) - float(precos[i]),
                        head_width=10,
                        head_length=10,
                        fc=self.cores['fluxo'],
                        ec=self.cores['fluxo'],
                        alpha=0.7
                    )
                
                self.camadas['fluxos'].append(linha)
    
    def criar_hud_evoluido(self, df, zonas_ativas, ressonancias_ativas):
        """
        HUD evolu√≠do com fluxos din√¢micos e informa√ß√µes contextuais
        """
        # √Årea do HUD
        hud_area = Rectangle(
            (0.02, 0.02), 0.3, 0.25,
            facecolor='black',
            alpha=0.8,
            edgecolor=self.cores['neutro'],
            linewidth=1,
            transform=self.ax.transAxes
        )
        self.ax.add_patch(hud_area)
        
        # Informa√ß√µes din√¢micas
        preco_atual = df['close'].iloc[-1]
        energia_magnetica = df['densidade'].iloc[-1] if 'densidade' in df.columns else 0
        
        info_texto = f"""
        üîÆ SNE - Observat√≥rio de For√ßas
        
        üí∞ Pre√ßo: {preco_atual:.2f} USDT
        ‚ö° Energia Magn√©tica: {energia_magnetica:.4f}
        üéØ Zonas Ativas: {len(zonas_ativas)}
        üîÑ Resson√¢ncias: {len(ressonancias_ativas)}
        
        üìä Campos Ativos:
        ‚Ä¢ Magn√©tico: {'Ativo' if zonas_ativas else 'Quieto'}
        ‚Ä¢ Gravitacional: {'Ativo' if energia_magnetica > 0.5 else 'Suave'}
        ‚Ä¢ Temporal: {'Ressonante' if ressonancias_ativas else 'Linear'}
        """
        
        self.ax.text(
            0.05, 0.20, info_texto,
            transform=self.ax.transAxes,
            color='white',
            fontsize=9,
            fontfamily='monospace',
            verticalalignment='top'
        )
    
    def limpar_camadas(self):
        """
        Remove todas as camadas visuais para nova renderiza√ß√£o
        """
        for camada in self.camadas.values():
            for elemento in camada:
                if hasattr(elemento, 'remove'):
                    elemento.remove()
                else:
                    self.ax.collections.remove(elemento)
        
        # Limpa as listas
        for key in self.camadas:
            self.camadas[key] = []
    
    def exportar_visualizacao(self, nome_arquivo):
        """
        Exporta a visualiza√ß√£o como imagem
        """
        self.fig.savefig(
            nome_arquivo,
            dpi=300,
            bbox_inches='tight',
            facecolor='#0a0a0a',
            edgecolor='none'
        )
        print(f"üé® Visualiza√ß√£o exportada: {nome_arquivo}")
    
    def mostrar_visualizacao(self):
        """
        Exibe a visualiza√ß√£o interativa
        """
        plt.tight_layout()
        plt.show()
