import json
import os
from datetime import datetime
import pandas as pd

class LinguagemSNE:
    """
    Linguagem Propriet√°ria do SNE
    - Vocabul√°rio gr√°fico √∫nico
    - Interpreta√ß√µes autom√°ticas
    - Registro de leituras visuais
    """
    
    def __init__(self):
        self.vocabulario = {
            # Campos Magn√©ticos
            'campo_magnetico_ativo': {
                'descricao': 'Zona onde for√ßas magn√©ticas est√£o concentradas',
                'indicadores': ['alta_densidade', 'volume_elevado', 'rupturas_frequentes'],
                'cor': '#00ffff',
                'simbolo': '‚ö°'
            },
            'ponto_ressonancia': {
                'descricao': 'Local onde padr√µes hist√≥ricos se repetem',
                'indicadores': ['similaridade_temporal', 'preco_proximo', 'volume_similar'],
                'cor': '#ff00ff',
                'simbolo': 'üîÑ'
            },
            'fluxo_gravitacional': {
                'descricao': 'Dire√ß√£o predominante da atra√ß√£o de pre√ßos',
                'indicadores': ['tendencia_clara', 'momentum_sustentado', 'suporte_resistencia'],
                'cor': '#ffff00',
                'simbolo': 'üåä'
            },
            'compressao_magnetica': {
                'descricao': 'Ac√∫mulo de energia antes de uma explos√£o',
                'indicadores': ['volatilidade_baixa', 'volume_crescente', 'range_estreito'],
                'cor': '#ff8800',
                'simbolo': 'üí•'
            },
            'eco_temporal': {
                'descricao': 'Repeti√ß√£o de padr√µes em diferentes escalas temporais',
                'indicadores': ['fractal_detectado', 'ciclo_similar', 'proporcao_constante'],
                'cor': '#8800ff',
                'simbolo': 'üéµ'
            }
        }
        
        self.caminho_codice = "codice_interpretacoes.json"
        self.interpretacoes = self.carregar_interpretacoes()
    
    def carregar_interpretacoes(self):
        """
        Carrega interpreta√ß√µes salvas ou cria novo arquivo
        """
        if os.path.exists(self.caminho_codice):
            with open(self.caminho_codice, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            return {
                'interpretacoes': [],
                'vocabulario_usado': {},
                'padroes_detectados': []
            }
    
    def salvar_interpretacao(self, interpretacao):
        """
        Salva uma nova interpreta√ß√£o no c√≥dice
        """
        self.interpretacoes['interpretacoes'].append(interpretacao)
        
        # Atualiza estat√≠sticas de vocabul√°rio
        for termo in interpretacao.get('termos_usados', []):
            if termo in self.interpretacoes['vocabulario_usado']:
                self.interpretacoes['vocabulario_usado'][termo] += 1
            else:
                self.interpretacoes['vocabulario_usado'][termo] = 1
        
        with open(self.caminho_codice, 'w', encoding='utf-8') as f:
            json.dump(self.interpretacoes, f, indent=2, ensure_ascii=False)
    
    def interpretar_campo_magnetico(self, df, zona_preco, forca):
        """
        Interpreta um campo magn√©tico detectado
        """
        interpretacao = {
            'timestamp': datetime.now().isoformat(),
            'tipo': 'campo_magnetico_ativo',
            'localizacao': {
                'preco_centro': zona_preco,
                'range': [zona_preco - 50, zona_preco + 50]
            },
            'intensidade': forca,
            'descricao': f"Campo magn√©tico ativo detectado na zona {zona_preco:.0f} USDT",
            'analise': self.analisar_intensidade_campo(forca),
            'termos_usados': ['campo_magnetico_ativo'],
            'recomendacoes': self.gerar_recomendacoes_campo(forca)
        }
        
        self.salvar_interpretacao(interpretacao)
        return interpretacao
    
    def interpretar_ressonancia_temporal(self, preco_atual, eventos_similares):
        """
        Interpreta uma resson√¢ncia temporal detectada
        """
        if not eventos_similares:
            return None
        
        interpretacao = {
            'timestamp': datetime.now().isoformat(),
            'tipo': 'ponto_ressonancia',
            'localizacao': {
                'preco_atual': preco_atual,
                'eventos_similares': len(eventos_similares)
            },
            'intensidade': len(eventos_similares),
            'descricao': f"Resson√¢ncia temporal detectada em {preco_atual:.2f} USDT",
            'analise': self.analisar_ressonancia(eventos_similares),
            'termos_usados': ['ponto_ressonancia', 'eco_temporal'],
            'recomendacoes': self.gerar_recomendacoes_ressonancia(eventos_similares)
        }
        
        self.salvar_interpretacao(interpretacao)
        return interpretacao
    
    def interpretar_fluxo_gravitacional(self, df, direcao, intensidade):
        """
        Interpreta um fluxo gravitacional detectado
        """
        interpretacao = {
            'timestamp': datetime.now().isoformat(),
            'tipo': 'fluxo_gravitacional',
            'caracteristicas': {
                'direcao': direcao,
                'intensidade': intensidade,
                'duracao': len(df)
            },
            'descricao': f"Fluxo gravitacional {direcao} detectado",
            'analise': self.analisar_fluxo(direcao, intensidade),
            'termos_usados': ['fluxo_gravitacional'],
            'recomendacoes': self.gerar_recomendacoes_fluxo(direcao, intensidade)
        }
        
        self.salvar_interpretacao(interpretacao)
        return interpretacao
    
    def analisar_intensidade_campo(self, forca):
        """
        Analisa a intensidade de um campo magn√©tico
        """
        if forca > 80:
            return "Campo magn√©tico extremamente intenso - alta probabilidade de ruptura"
        elif forca > 50:
            return "Campo magn√©tico forte - movimento significativo esperado"
        elif forca > 20:
            return "Campo magn√©tico moderado - aten√ß√£o redobrada"
        else:
            return "Campo magn√©tico suave - monitoramento passivo"
    
    def analisar_ressonancia(self, eventos_similares):
        """
        Analisa uma resson√¢ncia temporal
        """
        if len(eventos_similares) > 5:
            return "Resson√¢ncia m√∫ltipla detectada - padr√£o hist√≥rico muito forte"
        elif len(eventos_similares) > 2:
            return "Resson√¢ncia significativa - repeti√ß√£o de padr√£o confirmada"
        else:
            return "Resson√¢ncia leve - poss√≠vel repeti√ß√£o de padr√£o"
    
    def analisar_fluxo(self, direcao, intensidade):
        """
        Analisa um fluxo gravitacional
        """
        if intensidade > 0.8:
            return f"Fluxo gravitacional {direcao} muito forte - movimento direcional claro"
        elif intensidade > 0.5:
            return f"Fluxo gravitacional {direcao} moderado - tend√™ncia estabelecida"
        else:
            return f"Fluxo gravitacional {direcao} suave - dire√ß√£o incerta"
    
    def gerar_recomendacoes_campo(self, forca):
        """
        Gera recomenda√ß√µes baseadas na intensidade do campo
        """
        if forca > 80:
            return ["Aguardar ruptura iminente", "Preparar posi√ß√£o", "Monitorar volume"]
        elif forca > 50:
            return ["Aten√ß√£o redobrada", "Verificar resson√¢ncias", "Aguardar confirma√ß√£o"]
        else:
            return ["Monitoramento passivo", "Aguardar fortalecimento"]
    
    def gerar_recomendacoes_ressonancia(self, eventos_similares):
        """
        Gera recomenda√ß√µes baseadas na resson√¢ncia
        """
        if len(eventos_similares) > 5:
            return ["Alta probabilidade de repeti√ß√£o", "Posicionar estrategicamente", "Usar stop tight"]
        elif len(eventos_similares) > 2:
            return ["Considerar entrada", "Verificar contexto atual", "Monitorar confirma√ß√£o"]
        else:
            return ["Aguardar mais sinais", "Manter observa√ß√£o"]
    
    def gerar_recomendacoes_fluxo(self, direcao, intensidade):
        """
        Gera recomenda√ß√µes baseadas no fluxo gravitacional
        """
        if intensidade > 0.8:
            return [f"Seguir fluxo {direcao}", "Posicionar na dire√ß√£o", "Usar momentum"]
        elif intensidade > 0.5:
            return [f"Considerar fluxo {direcao}", "Aguardar confirma√ß√£o", "Monitorar for√ßa"]
        else:
            return ["Aguardar dire√ß√£o clara", "Manter neutralidade"]
    
    def gerar_relatorio_linguagem(self):
        """
        Gera um relat√≥rio da linguagem utilizada
        """
        relatorio = {
            'timestamp': datetime.now().isoformat(),
            'total_interpretacoes': len(self.interpretacoes['interpretacoes']),
            'vocabulario_mais_usado': sorted(
                self.interpretacoes['vocabulario_usado'].items(),
                key=lambda x: x[1],
                reverse=True
            )[:5],
            'padroes_detectados': self.interpretacoes['padroes_detectados'],
            'resumo': self.gerar_resumo_linguagem()
        }
        
        return relatorio
    
    def gerar_resumo_linguagem(self):
        """
        Gera um resumo da linguagem utilizada
        """
        total_interpretacoes = len(self.interpretacoes['interpretacoes'])
        if total_interpretacoes == 0:
            return "Nenhuma interpreta√ß√£o registrada ainda"
        
        tipos_mais_comuns = {}
        for interpretacao in self.interpretacoes['interpretacoes']:
            tipo = interpretacao.get('tipo', 'desconhecido')
            tipos_mais_comuns[tipo] = tipos_mais_comuns.get(tipo, 0) + 1
        
        tipo_principal = max(tipos_mais_comuns.items(), key=lambda x: x[1])
        
        return f"Total de {total_interpretacoes} interpreta√ß√µes. Padr√£o principal: {tipo_principal[0]} ({tipo_principal[1]} ocorr√™ncias)"
    
    def traduzir_para_linguagem_sne(self, evento_tradicional):
        """
        Traduz eventos tradicionais para a linguagem SNE
        """
        traducoes = {
            'support': 'campo_magnetico_ativo',
            'resistance': 'campo_magnetico_ativo',
            'breakout': 'ruptura_magnetica',
            'breakdown': 'ruptura_magnetica',
            'trend': 'fluxo_gravitacional',
            'pattern': 'eco_temporal',
            'volume_spike': 'compressao_magnetica',
            'consolidation': 'compressao_magnetica'
        }
        
        return traducoes.get(evento_tradicional, 'evento_desconhecido')
